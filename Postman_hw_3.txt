1) необходимо залогиниться
POST
http://162.55.220.72:5005/login
login : str (кроме /)>>>>>>Juliya
password : str>>>>>>>hello
Приходящий токен необходимо передать во все остальные запросы.
{"token":"/s34lfgbj/Juliya/jjd909/73792kjkWpqc4001hello271571evny"}
New Enveronment>>>HW_3>>>var "auth_token"
===================
дальше все запросы требуют наличие токена.
===================

2) http://162.55.220.72:5005/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token
Body>>>RAW>>>>(JSON)
{
    "age": 39,
    "salary": 1568,
    "name": "Juliya",
    "auth_token": "{{auth_token}}"
    }
Resp:
 {
    "person": {
        "u_age": 39,
        "u_name": [
            "Juliya",
            1568,
            39
        ],
        "u_salary_1_5_year": 6272
    },
    "qa_salary_after_12_months": 4547.2,
    "qa_salary_after_6_months": 3136,
    "start_qa_salary": 1568
}

Тесты:
1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
2) Проверка структуры json в ответе.
     
     1) спарсить респ
     2)скопировать ответ и в schema генераторе сгенерить схему
     3) создать переменную schema и в значение внести сгенерированную раннее схему
     4)тест:
     pm.test("Schema data validetion", function () {
         pm.response.to.have.jsonSchema(schema)
      });
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
    req_json = JSON.parse(request.data)
pm.test("S_6_resp is S_req", function () {
    pm.expect(resp_json.qa_salary_after_6_months).to.eql(+(req_json.salary*2))
});
pm.test("S_12_resp is S_req*2.9", function () {
    pm.expect(resp_json.qa_salary_after_12_months).to.eql(+(req_json.salary*2.9))
});
pm.test("S_1.5_resp is S_req*4", function () {
    pm.expect(+(resp_json.person.u_salary_1_5_year)).to.eql(req_json.salary*4)
});

4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user
Environment_HW_3>>>var_salary
pm.environment.set("salary", resp_json.person.u_salary_1_5_year)
http://162.55.220.72:5005/get_test_user?salary={{salary}}

===================

3) http://162.55.220.72:5005/new_data
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

{
    "age": 39,
    "name": "Juliya",
    "salary": [
        1568,
        "3136",
        "4704"
    ]
}
Тесты:
1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе.
var resp = pm.response.json ();
var schema = {
    "type": "object",
  "properties": {
    "age": {
      "type": "integer"
    },
    "name": {
      "type": "string"
    },
    "salary": {
      "type": "array",
      "items": [
        {
          "type": "integer"
        },
        {
          "type": "string"
        },
        {
          "type": "string"
        }
      ]
    }
  },
  "required": [
    "age",
    "name",
    "salary"
  ]
}
pm.test ("Validate schema json", function () {
    pm.response.to.have.jsonSchema(schema)
});

3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
var req_json = request.data
pm.test("S[1]_resp is S*2_req", function () {
    pm.expect(+(resp_json.salary[1])).to.eql(req_json.salary*2)
});
4) проверить, что 2-й элемент массива salary больше 1-го и 0-го

===================

4) http://162.55.220.72:5005/test_pet_info
req.
POST
age: int
weight: int
name: str
auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.

===================

5) http://162.55.220.72:5005/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) Проверить что занчение поля name = значению переменной name из окружения
4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age

===================

6) http://162.55.220.72:5005/currency
req.
POST
auth_token

Resp. Передаётся список массив объектов.
[
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
…
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
]

Тесты:
1) Можете взять любой объект из присланного списка, используйте js random.
В объекте возьмите Cur_ID и передать через окружение в следующий запрос.

 ===================

7) http://162.55.220.72:5005/curr_byn
req.
POST
auth_token
curr_code: int

Resp.
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.


===============
***
1) получить список валют
2) итерировать список валют
3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты
4) если возвращается 500 код, переходим к следующей итреации
5) если получаем 200 код, проверяем response json на наличие поля "Cur_OfficialRate"
6) если поле есть, пишем в консоль инфу про фалюту в виде response
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}
7) переходим к следующей итерации
